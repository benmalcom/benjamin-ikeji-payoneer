{"version":3,"sources":["components/UI/Loading/Loading.module.scss","components/Weather/DailyWeatherChart/DailyWeatherChart.module.scss","redux/actions/_create.js","redux/actions/forecast.js","redux/actions/api.js","redux/actions/ui.js","services/_request/keys.js","utils/prop-types/forecast.js","utils/forecast.js","components/Weather/Forecast/index.js","components/Weather/ForecastCarousel/index.js","components/UI/StyledRadio/index.js","components/Weather/MetricSwitcher/index.js","components/UI/Loading/index.js","components/Weather/DailyWeatherChart/index.js","utils/hooks/use-previous.js","domain/WeatherInfo/index.js","components/App/App.js","reportWebVitals.js","redux/reducers/forecast.js","redux/reducers/ui.js","redux/reducers/index.js","services/_request/index.js","redux/middleswares/api.js","redux/middleswares/forecast.js","redux/middleswares/index.js","redux/store.js","utils/index.js","index.js","domain/WeatherInfo/WeatherInfo.module.scss","components/Weather/ForecastCarousel/ForecastCarousel.module.scss","components/Weather/MetricSwitcher/MetricSwitcher.module.scss","components/Weather/Forecast/Forecast.module.scss"],"names":["module","exports","createActionType","type","entity","START","SUCCESS","ERROR","END","createActionString","name","FETCH_FORECASTS","RESET_FORECAST_STATE","APPLY_METRICS_TO_FORECASTS","UPDATE_FORECAST_LIST","SET_CURRENT_METRIC","SET_CURRENT_DATE","applyMetricToForecasts","metric","meta","setCurrentDate","date","payload","API_REQUEST","UPDATE_PAGINATION","UPDATE_ERROR_STATE","UPDATE_LOADING_STATE","updateLoadingState","key","requestKeys","PropTypes","shape","temp","number","isRequired","arrayOf","main","string","icon","metrics","metricValues","metricValuesIconMap","C","F","celsiusToFahrenheit","value","fahrenheitToCelcius","roundToTemp","Math","round","Forecast","props","weatherData","onClick","selectedDate","currentMetric","dayjs","dt_txt","format","isToday","isSame","wordedDate","trim","Card","className","cx","styles","card","selected","CardContent","Typography","color","align","component","CardMedia","image","alt","src","weather","variant","gutterBottom","avg_temp","defaultProps","deviceBreakpoints","minDeviceWidth","maxDeviceWidth","settings","dots","infinite","speed","slidesToShow","slidesToScroll","arrows","responsive","breakpoint","WeatherCarousel","items","onCardItemClick","useState","currentSlide","setCurrentSlide","sliderRef","useRef","isMobile","useMediaQuery","isLowResTableOrMobile","afterChange","index","useEffect","slides","forEach","push","some","current","newDate","isLeftArrowVisible","iRightArrowVisible","Box","Button","controls","slickPrev","fontSize","slickNext","ref","map","item","uuid","useStyles","makeStyles","root","fontWeight","backgroundColor","borderRadius","width","height","boxShadow","backgroundImage","outline","outlineOffset","background","checkedIcon","display","content","StyledRadio","classes","Radio","disableRipple","MetricSwitcher","onChange","RadioGroup","FormControlLabel","role","control","checked","label","Loading","box","getOptions","maintainAspectRatio","scales","yAxis","ticks","beginAtZero","callback","values","DailyWeatherBarChart","data","chartData","labels","datasets","borderWidth","options","PARAMS","q","units","dispatch","useDispatch","useSelector","forecasts","ui","allForecastList","byList","forecastsForNextDays","forNextDays","forecastsByDate","byDate","loading","error","errors","currentDate","getForecasts","params","fetchForecasts","length","previousCurrentDate","todayForecast","previousByList","usePrevious","forecastsForSelectedDate","hasError","Container","container","e","target","ForecastCarousel","App","history","useHistory","window","Appcues","identify","random","created_at","Date","now","first_name","last_name","listen","location","console","log","pathname","page","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","pagination","default","cnt","state","action","groupBy","Object","groupList","last","sum","reduce","a","c","assign","instance","axios","create","baseURL","method","APPID","process","interceptors","request","use","config","Promise","reject","response","code","Error","message","next","url","onError","onSuccess","isEmpty","FormData","createRequest","catch","updateErrorState","finally","getState","rest","defaultPagination","isNewList","list","applyMetricToForecastsFn","metricFunc","feels_like","temp_min","temp_max","updateForecastList","api","incident","allMiddlesWares","middleswares","store","configureStore","preloadedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","reducer","devTools","middleware","getDefaultMiddleware","serializableCheck","concat","subscribe","stringify","setItem","saveState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4f8008e0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Loading_box__2w-WH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"DailyWeatherChart_box__rqICc\"};","export const createActionType = (type, entity = 'App') => ({\n  START: `@@[${entity}] ${type}`,\n  SUCCESS: `@@[${entity}] ${type}_SUCCESS`,\n  ERROR: `@@[${entity}] ${type}_ERROR`,\n  END: `@@[${entity}] ${type}_END`,\n});\n\nexport const createActionString = (name, entity = 'App') => `@@[${entity}] ${name}`;\n","import { createActionType, createActionString } from './_create';\n\nexport const FETCH_FORECASTS = createActionType('FETCH_FORECASTS', 'Weather');\nexport const RESET_FORECAST_STATE = createActionType('RESET_FORECAST_STATE', 'Weather');\nexport const APPLY_METRICS_TO_FORECASTS = createActionString('APPLY_METRICS_TO_FORECASTS', 'Forecast');\nexport const UPDATE_FORECAST_LIST = createActionString('UPDATE_FORECAST_LIST', 'Forecast');\nexport const SET_CURRENT_METRIC = createActionString('SET_CURRENT_METRIC', 'Temperature');\nexport const SET_CURRENT_DATE = createActionString('SET_CURRENT_DATE', 'Temperature');\n\nexport const fetchForecasts = (params = {}) => ({\n  type: FETCH_FORECASTS.START,\n  meta: {\n    params,\n  },\n});\n\nexport const resetForecastState = () => ({\n  type: RESET_FORECAST_STATE.START,\n});\n\nexport const applyMetricToForecasts = (metric) => ({\n  type: APPLY_METRICS_TO_FORECASTS,\n  meta: {\n    metric,\n  },\n});\n\nexport const updateForecastList = (payload) => ({\n  type: UPDATE_FORECAST_LIST,\n  payload,\n});\n\nexport const setCurrentMetric = (metric) => ({\n  type: SET_CURRENT_METRIC,\n  payload: metric,\n});\n\nexport const setCurrentDate = (date) => ({\n  type: SET_CURRENT_DATE,\n  payload: date,\n});\n","import { createActionType } from './_create';\n\nexport const API_REQUEST = createActionType('API_REQUEST', 'Api Request');\nexport const apiRequest = meta => ({\n  type: API_REQUEST.START,\n  meta,\n});\n","export const UPDATE_PAGINATION = 'UPDATE_PAGINATION';\nexport const UPDATE_ERROR_STATE = 'UPDATE_ERROR_STATE';\nexport const UPDATE_LOADING_STATE = 'UPDATE_LOADING_STATE';\n\nexport const updatePagination = (key, payload) => ({\n  type: UPDATE_PAGINATION,\n  key,\n  payload\n});\n\nexport const updateErrorState = (key, payload) => ({\n  type: UPDATE_ERROR_STATE,\n  key,\n  payload\n});\n\nexport const updateLoadingState = (key, payload) => ({\n  type: UPDATE_LOADING_STATE,\n  key,\n  payload\n});\n","export const requestKeys = {\n  fetchForecasts: 'fetchForecasts',\n}","import PropTypes from 'prop-types';\n\nexport default {\n  main: PropTypes.shape({\n    temp: PropTypes.number.isRequired,\n  }),\n  weather: PropTypes.arrayOf(PropTypes.shape(\n    {\n      main: PropTypes.string.isRequired,\n      icon: PropTypes.string.isRequired,\n    }),\n  ),\n  dt_txt: PropTypes.string.isRequired,\n  avg_temp: PropTypes.number,\n};","export const metrics = {\n  CELCIUS: 'Celcius',\n  FAHRENHEIT: 'Fahrenheit',\n};\n\nexport const metricValues = {\n  CELCIUS: 'C',\n  FAHRENHEIT: 'F',\n};\n\nexport const metricValuesIconMap = {\n  C: '\\xB0C',\n  F: '\\xB0F',\n};\n\nexport const celsiusToFahrenheit = value => value * 9 / 5 + 32;\n\nexport const fahrenheitToCelcius = value => (value - 32) * 5 / 9;\n\nexport const roundToTemp = value => Math.round(value);\n","import React from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Card, CardContent, CardMedia, Typography } from '@material-ui/core';\nimport dayjs from 'dayjs';\nimport forecastPropTypes from 'utils/prop-types/forecast';\n\nimport styles from './Forecast.module.scss';\nimport { metricValuesIconMap, roundToTemp } from 'utils/forecast';\n\n\nconst Forecast = (props) => {\n  const { weatherData, onClick, selectedDate, currentMetric } = props;\n  const date = dayjs(weatherData.dt_txt).format('DD/MM/YYYY');\n\n  const isToday = dayjs().isSame(dayjs(weatherData.dt_txt), 'day');\n\n  const wordedDate = `${dayjs(weatherData.dt_txt).format(`DD MMM, YYYY`)}${isToday ? ' (Today)' : ''}`.trim();\n\n  return <Card className={cx(styles.card, date === selectedDate && styles.selected)} onClick={() => onClick(date)}>\n    <CardContent>\n      <Typography color=\"textPrimary\" align='center'  component='p'>\n        {wordedDate}\n      </Typography>\n      <CardMedia\n        className={styles.image}\n        component='img'\n        alt='forecast-icon'\n        src={`http://openweathermap.org/img/wn/${weatherData.weather[0]?.icon}@2x.png`}\n      />\n      <Typography variant='body2' color='textSecondary' align='center'>\n        {weatherData.weather[0]?.main}\n      </Typography>\n      <Typography gutterBottom variant='h4' component='h2' align='center'>\n        {`${roundToTemp(weatherData.main.temp)}${metricValuesIconMap[currentMetric]}`}\n\n      </Typography>\n      <Typography variant='subtitle1' color='textSecondary' align='center' component='p'>\n        Average Temp: {`${roundToTemp(weatherData.avg_temp)}${metricValuesIconMap[currentMetric]}`}\n      </Typography>\n    </CardContent>\n  </Card>;\n};\n\nForecast.propTypes = {\n  weatherData: PropTypes.shape(forecastPropTypes).isRequired,\n  onClick: PropTypes.func.isRequired,\n  selectedDate: PropTypes.string,\n  currentMetric: PropTypes.string.isRequired,\n};\n\nForecast.defaultProps = {\n  selectedDate: null\n};\n\n\nexport default Forecast;","import React, { useEffect, useRef, useState } from 'react';\nimport Slider from 'react-slick';\nimport cx from 'classnames';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport { v1 as uuid } from 'uuid';\nimport dayjs from 'dayjs';\nimport { useMediaQuery } from 'react-responsive';\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\nimport styles from './ForecastCarousel.module.scss';\n\nimport WeatherCard from '../Forecast';\nimport { Box, Button } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport forecastProptypes from 'utils/prop-types/forecast';\n\nconst deviceBreakpoints = {\n  MOBILE: { minDeviceWidth: 320, maxDeviceWidth: 480 },\n  LOW_RES_TABLET_OR_MOBILE: { minDeviceWidth: 481, maxDeviceWidth: 768 },\n  TABLETS_AND_LAPTOPS: { minDeviceWidth: 1024 },\n};\n\nconst settings = {\n  dots: false,\n  infinite: false,\n  speed: 500,\n  slidesToShow: 3,\n  slidesToScroll: 1,\n  arrows: false,\n  responsive: [\n    {\n      breakpoint: deviceBreakpoints.TABLETS_AND_LAPTOPS.minDeviceWidth,\n      settings: {\n        slidesToShow: 3,\n      },\n    },\n    {\n      breakpoint: deviceBreakpoints.LOW_RES_TABLET_OR_MOBILE.maxDeviceWidth,\n      settings: {\n        slidesToShow: 2,\n      },\n    },\n    {\n      breakpoint: deviceBreakpoints.MOBILE.maxDeviceWidth,\n      settings: {\n        slidesToShow: 1,\n      },\n    },\n  ],\n};\n\nconst WeatherCarousel = (props) => {\n  const { items, onCardItemClick, selectedDate, setCurrentDate, currentMetric } = props;\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const sliderRef = useRef(null);\n\n  const isMobile = useMediaQuery(deviceBreakpoints.MOBILE);\n  const isLowResTableOrMobile = useMediaQuery(deviceBreakpoints.LOW_RES_TABLET_OR_MOBILE);\n\n  const getNumOfVisibleSlides = () => {\n    if (isMobile) return 1;\n    else if (isLowResTableOrMobile) return 2;\n    else return 3;\n  };\n\n  const gotoNext = () => {\n    sliderRef.current.slickNext();\n  };\n\n  const gotoPrevious = () => {\n    sliderRef.current.slickPrev();\n  };\n\n  settings.afterChange = (index) => {\n    setCurrentSlide(index);\n  };\n\n  useEffect(() => {\n    if (currentSlide === 0) return;\n    const slides = [currentSlide];\n    [currentSlide + 1, currentSlide + 2].forEach((index) => {\n      if (items[index]) slides.push(index);\n    });\n    const hasSelection = slides.some((index) => {\n      const current = items[index];\n      return dayjs(current.dt_txt).format('DD/MM/YYYY') === selectedDate;\n    });\n\n    if (!hasSelection) {\n      const current = items[currentSlide];\n      const newDate = dayjs(current.dt_txt).format('DD/MM/YYYY');\n      setCurrentDate(newDate);\n    }\n  }, [currentSlide]);\n\n  const isLeftArrowVisible = currentSlide > 0;\n  const iRightArrowVisible = !!items[currentSlide + getNumOfVisibleSlides()];\n\n  return (\n    <>\n      <Box\n        component=\"div\"\n        className={cx(\n          styles['controls-container'],\n          { [styles['controls-left']]: isLeftArrowVisible && !iRightArrowVisible },\n          { [styles['controls-right']]: iRightArrowVisible && !isLeftArrowVisible }\n        )}\n      >\n        {isLeftArrowVisible && (\n          <Button className={styles.controls} onClick={gotoPrevious}>\n            <ArrowBackIcon fontSize=\"large\" />\n          </Button>\n        )}\n        {iRightArrowVisible && (\n          <Button className={styles.controls} onClick={gotoNext}>\n            <ArrowForwardIcon fontSize=\"large\" />\n          </Button>\n        )}\n      </Box>\n      <Slider ref={sliderRef} {...settings}>\n        {items.map((item) => (\n          <WeatherCard\n            currentMetric={currentMetric}\n            selectedDate={selectedDate}\n            onClick={onCardItemClick}\n            weatherData={item}\n            key={uuid}\n          />\n        ))}\n      </Slider>\n    </>\n  );\n};\n\nWeatherCarousel.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape(forecastProptypes)).isRequired,\n  onCardItemClick: PropTypes.func.isRequired,\n  setCurrentDate: PropTypes.func.isRequired,\n  selectedDate: PropTypes.string,\n  currentMetric: PropTypes.string.isRequired,\n};\n\nWeatherCarousel.defaultProps = {\n  selectedDate: null,\n};\n\nexport default WeatherCarousel;\n","import { makeStyles, Radio } from '@material-ui/core';\nimport cx from 'classnames';\n\nconst useStyles = makeStyles({\n  root: {\n    fontWeight: 'bold !important',\n    '&:hover': {\n      backgroundColor: 'transparent',\n    },\n  },\n  icon: {\n    borderRadius: '50%',\n    width: 16,\n    height: 16,\n    boxShadow: 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\n    backgroundColor: '#f5f8fa',\n    backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))',\n    '$root.Mui-focusVisible &': {\n      outline: '2px auto rgba(19,124,189,.6)',\n      outlineOffset: 2,\n    },\n    'input:hover ~ &': {\n      backgroundColor: '#ebf1f5',\n    },\n    'input:disabled ~ &': {\n      boxShadow: 'none',\n      background: 'rgba(206,217,224,.5)',\n    },\n  },\n  checkedIcon: {\n    backgroundColor: '#426CC0',\n    backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))',\n    '&:before': {\n      display: 'block',\n      width: 16,\n      height: 16,\n      backgroundImage: 'radial-gradient(#fff,#fff 28%,transparent 32%)',\n      content: '\"\"',\n    },\n    'input:hover ~ &': {\n      backgroundColor: '#426CC0',\n    },\n  },\n});\n\nconst StyledRadio = (props) => {\n  const classes = useStyles();\n\n  return (\n    <Radio\n      className={classes.root}\n      disableRipple\n      color=\"default\"\n      checkedIcon={<span className={cx(classes.icon, classes.checkedIcon)} />}\n      icon={<span className={classes.icon} />}\n      {...props}\n    />\n  );\n}\n\nexport default StyledRadio;\n","import React from 'react';\nimport { Box, FormControlLabel, RadioGroup } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport styles from './MetricSwitcher.module.scss';\nimport StyledRadio from '../../UI/StyledRadio';\nimport { metrics, metricValues } from 'utils/forecast';\n\nconst MetricSwitcher = (props) => {\n  const { onChange, value } = props;\n  return <Box component='div' className={styles['metric-switch-controls']}>\n    <RadioGroup className={styles['metric-switch-radio-group']} value={value} onChange={onChange} name='radio-button-metric'>\n      <FormControlLabel\n        role=\"radio\"\n        className={styles['switch-control']}\n        value={metricValues.CELCIUS}\n        control={<StyledRadio />}\n        checked={value === metricValues.CELCIUS}\n        label={metrics.CELCIUS} />\n      <FormControlLabel\n        role=\"radio\"\n        className={styles['switch-control']}\n        value={metricValues.FAHRENHEIT}\n        checked={value === metricValues.FAHRENHEIT}\n        control={<StyledRadio />}\n        label={metrics.FAHRENHEIT} />\n    </RadioGroup>\n\n  </Box>;\n};\n\nMetricSwitcher.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string,\n};\n\nMetricSwitcher.defaultProps = {\n  value: null,\n};\n\nexport default MetricSwitcher;","import React from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport styles from './Loading.module.scss';\n\nconst Loading = () => <Box className={styles.box}>\n  <Typography gutterBottom variant='h5' component='h5' align='center'>\n    Loading...\n  </Typography>\n</Box>;\n\nexport default Loading;\n","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport dayjs from 'dayjs';\nimport { Box } from '@material-ui/core';\nimport { roundToTemp, metricValuesIconMap } from 'utils/forecast';\nimport styles from './DailyWeatherChart.module.scss';\nimport PropTypes from 'prop-types';\nimport forecastProptypes from 'utils/prop-types/forecast';\n\n\nconst getOptions = (metric) => {\n\n  return {\n    maintainAspectRatio: false,\n    scales: {\n      yAxis: [\n        {\n          ticks: {\n            display: true,\n            beginAtZero: true,\n            callback (value, index, values) {\n              return `${value} ${metricValuesIconMap[metric]}`;\n            },\n          },\n        },\n      ],\n    },\n  };\n};\n\nconst DailyWeatherBarChart = (props) => {\n  const { data, metric } = props;\n  const chartData = {\n    labels: data.map(item => dayjs(item.dt_txt).format('h:mm A')),\n    datasets: [\n      {\n        label: `Temperatures in ${metricValuesIconMap[metric]}`,\n        data: data.map(item => roundToTemp(item.main.temp)),\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n          'rgba(75, 192, 192, 0.2)',\n          'rgba(153, 102, 255, 0.2)',\n          'rgba(255, 159, 64, 0.2)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n  return <Box className={styles.box}>\n    <Bar type='vertical' data={chartData} options={getOptions(props.metric)} />\n  </Box>;\n\n};\n\nDailyWeatherBarChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape(forecastProptypes)).isRequired,\n};\n\n\nexport default DailyWeatherBarChart;","import { useEffect, useRef } from 'react';\n// Hook\nexport default (value) => {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef();\n\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport cx from 'classnames';\nimport { Button, Container, Box } from '@material-ui/core';\nimport dayjs from 'dayjs';\nimport {\n  fetchForecasts,\n  resetForecastState,\n  applyMetricToForecasts,\n  setCurrentMetric,\n  setCurrentDate,\n} from 'redux/actions';\nimport { requestKeys } from 'services/_request/keys';\nimport ForecastCarousel from 'components/Weather/ForecastCarousel';\nimport MetricSwitcher from 'components/Weather/MetricSwitcher';\nimport Loading from 'components/UI/Loading';\nimport DailyWeatherBarChart from 'components/Weather/DailyWeatherChart';\nimport usePrevious from 'utils/hooks/use-previous';\nimport styles from './WeatherInfo.module.scss';\nimport { metricValues } from '../../utils/forecast';\n\nconst PARAMS = { q: 'Munich,de', units: 'metric' };\n\nconst Forecast = () => {\n  const dispatch = useDispatch();\n  const { forecastsForNextDays, loading, currentMetric, forecastsByDate, error, currentDate, byList } = useSelector(\n    ({ forecasts, ui }) => ({\n      allForecastList: forecasts.byList,\n      forecastsForNextDays: forecasts.forNextDays,\n      forecastsByDate: forecasts.byDate,\n      currentMetric: forecasts.currentMetric,\n      loading: ui.loading[requestKeys.fetchForecasts],\n      error: ui.errors[requestKeys.fetchForecasts],\n      currentDate: forecasts.currentDate,\n    })\n  );\n\n  const getForecasts = (params) => dispatch(fetchForecasts(params));\n\n  useEffect(() => {\n    getForecasts(PARAMS);\n    return () => {\n      dispatch(resetForecastState());\n    };\n  }, []);\n\n  useEffect(() => {\n    if (forecastsForNextDays?.length) dispatch(applyMetricToForecasts(currentMetric));\n    if (previousCurrentDate) dispatch(setCurrentDate(previousCurrentDate));\n  }, [currentMetric]);\n\n  useEffect(() => {\n    if (forecastsForNextDays?.length) {\n      const todayForecast = forecastsForNextDays[0];\n      const date = previousCurrentDate || dayjs(todayForecast.dt_txt).format('DD/MM/YYYY');\n      dispatch(setCurrentDate(date));\n    }\n  }, [forecastsForNextDays]);\n\n  useEffect(() => {\n    if (\n      (!previousByList?.length && byList?.length) ||\n      (previousByList?.length && byList.length && previousByList?.length !== byList.length)\n    ) {\n      if (currentMetric && currentMetric !== metricValues.CELCIUS) dispatch(applyMetricToForecasts(currentMetric));\n    }\n  }, [byList]);\n\n  const previousByList = usePrevious(byList);\n  const previousCurrentDate = usePrevious(currentDate);\n\n  const onMetricChange = (e) => dispatch(setCurrentMetric(e.target.value));\n\n  const onCardItemClick = (date) => dispatch(setCurrentDate(date));\n\n  const forecastsForSelectedDate = forecastsByDate ? forecastsByDate[currentDate] : [];\n\n  const getWeatherContent = () => (\n    <>\n      {' '}\n      {forecastsForNextDays && (\n        <ForecastCarousel\n          currentMetric={currentMetric}\n          setCurrentDate={setCurrentDate}\n          metric={currentMetric}\n          selectedDate={currentDate}\n          items={forecastsForNextDays}\n          onCardItemClick={onCardItemClick}\n        />\n      )}\n      {forecastsForSelectedDate && <DailyWeatherBarChart metric={currentMetric} data={forecastsForSelectedDate} />}\n    </>\n  );\n\n  const hasError = !!error;\n\n  return loading ? (\n    <Loading />\n  ) : (\n    <Container className={styles.container}>\n      <Box className={cx(styles['action-bar'], { [styles['has-error']]: !!hasError })}>\n        {!hasError && <MetricSwitcher value={currentMetric} onChange={onMetricChange} />}\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() => getForecasts(PARAMS)}\n          className={styles['refresh-btn']}\n        >\n          Refresh\n        </Button>\n      </Box>\n      <Box className={cx(styles['weather-content'], { [styles['has-error']]: !!hasError })}>\n        {hasError && <div className={styles.error}>{error}</div>}\n        {!hasError && getWeatherContent()}\n      </Box>\n    </Container>\n  );\n};\n\nexport default Forecast;\n","import React, { useEffect } from 'react';\nimport { BrowserRouter, Route, Switch, useHistory } from 'react-router-dom';\n\nimport Forecast from 'domain/WeatherInfo';\n\nconst App = () => {\n  const history = useHistory();\n\n  useEffect(() => {\n    if (typeof window.Appcues !== 'undefined') {\n      window.Appcues.identify(Math.random(), {\n        created_at: Date.now(),\n        first_name: 'user',\n        last_name: `${Math.random() * 10}`,\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!history) return;\n    return history.listen((location) => {\n      console.log(`You changed the page to: ${location.pathname}`);\n      if (typeof window.Appcues !== 'undefined') {\n        window.Appcues.page();\n      }\n    });\n  }, [history]);\n\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" component={Forecast} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { groupBy, last } from 'lodash';\nimport dayjs from 'dayjs';\nimport {\n  FETCH_FORECASTS,\n  RESET_FORECAST_STATE,\n  SET_CURRENT_METRIC,\n  UPDATE_FORECAST_LIST,\n  SET_CURRENT_DATE,\n} from '../actions';\nimport { metricValues } from '../../utils/forecast';\n\nconst initialState = {\n  currentMetric: metricValues.CELCIUS,\n  currentDate: null,\n  byList: [],\n  byDate: {},\n  forNextDays: [],\n};\n\nconst forecastReducer = (state = initialState, action) => {\n  const { payload, type } = action;\n  switch (type) {\n    case UPDATE_FORECAST_LIST:\n    case FETCH_FORECASTS.SUCCESS: {\n      const byList = payload;\n      const byDate = groupBy(byList, (item) => dayjs(item.dt_txt).format('DD/MM/YYYY'));\n      const forNextDays = Object.values(byDate).map((groupList) => {\n        const item = { ...last(groupList) };\n        const sum = groupList.reduce((a, c) => a + c?.main?.temp, 0);\n        return {\n          ...item,\n          avg_temp: sum / groupList.length,\n        };\n      });\n\n      return Object.assign({}, state, {\n        byList,\n        byDate,\n        forNextDays,\n      });\n    }\n    case SET_CURRENT_METRIC:\n      return {\n        ...state,\n        currentMetric: payload,\n      };\n    case SET_CURRENT_DATE:\n      return {\n        ...state,\n        currentDate: payload,\n      };\n    case RESET_FORECAST_STATE:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nexport default forecastReducer;\n","import {\n  UPDATE_ERROR_STATE,\n  UPDATE_LOADING_STATE,\n  UPDATE_PAGINATION,\n} from '../actions';\n\nconst initialState = {\n  pagination: {\n    default: {\n      cnt: 40\n    },\n  },\n  loading: {},\n  errors: {},\n};\n\nconst uiReducer = (state = initialState, action) => {\n  const { payload, key } = action;\n  switch (action.type) {\n    case UPDATE_LOADING_STATE: {\n      return Object.assign({}, state, {\n        loading: {\n          ...state.loading,\n          [key]: payload,\n        },\n      });\n    }\n\n    case UPDATE_PAGINATION: {\n      const { pagination } = state;\n      const current = pagination[key] || pagination.default;\n      return Object.assign({}, state, {\n        pagination: {\n          ...state.pagination,\n          [key]: {\n            ...current,\n            ...payload,\n          },\n        },\n      });\n    }\n    case UPDATE_ERROR_STATE: {\n      return Object.assign({}, state, {\n        errors: {\n          ...state.errors,\n          [key]: payload,\n        },\n      });\n    }\n    default:\n      return state;\n  }\n};\n\nexport default uiReducer;\n\n\n","import forecasts from './forecast';\nimport ui from './ui';\n\nexport default {\n    forecasts,\n    ui\n};","import axios from 'axios';\n\n// Default config options\nconst defaultOptions = {\n  baseURL: 'https://api.openweathermap.org/data/2.5/',\n  method: 'GET',\n  params: {\n    APPID: process.env.REACT_APP_WEATHER_APP_ID,\n  },\n};\n\n// Create instance\nconst instance = axios.create(defaultOptions);\n\ninstance.interceptors.request.use(\n  (config) => config,\n  (error) => Promise.reject(error)\n);\n// Add a response interceptor\ninstance.interceptors.response.use(\n  (response) => response.data,\n  (error) => {\n    if (error.response) {\n      if (error.code === 'ECONNABORTED') throw new Error('Network timeout, please try again');\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      throw error.response.data;\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      error.message = 'This request is taking too long, please check your network';\n      throw error;\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      throw error;\n    }\n  }\n);\nexport default instance;\n\nexport const createRequest = (config) => instance(config);\n","import { isEmpty } from 'lodash';\nimport { createRequest } from '../../services/_request';\nimport {\n  API_REQUEST,\n  updateLoadingState,\n  updateErrorState\n} from '../actions';\n\nconst apiRequest = ({ dispatch }) => next => action => {\n  if (action.type === API_REQUEST.START) {\n    const {\n      method = 'GET',\n      url,\n      key,\n      payload,\n      onError,\n      params,\n      onSuccess,\n    } = action.meta;\n    dispatch(updateLoadingState(key, true));\n    const config = { method, url };\n    if (payload && (!isEmpty(payload) || payload instanceof FormData)) {\n      config.data = payload;\n    }\n    if (params && !isEmpty(params)) {\n      config.params = params;\n    }\n    createRequest(config)\n      .then(data => {\n        if (onSuccess) {\n          if (typeof onSuccess === 'function') {\n            onSuccess(data);\n          } else {\n            dispatch({ type: onSuccess, payload: data });\n          }\n        }\n      })\n      .catch(e => {\n        if (onError) {\n          if (typeof onError !== 'function') {\n            throw new Error('onError parameter should be a function');\n          }\n          onError(e.message);\n        } else {\n          dispatch(updateErrorState(key, e.message))\n        }\n      }).finally(() => dispatch(updateLoadingState(key, false)));\n  }\n  return next(action);\n};\n\nexport default [apiRequest];\n","import {\n  apiRequest,\n  APPLY_METRICS_TO_FORECASTS,\n  FETCH_FORECASTS,\n  updateForecastList,\n  applyMetricToForecasts as applyMetricToForecastsFn,\n} from '../actions';\nimport { requestKeys } from '../../services/_request/keys';\nimport { celsiusToFahrenheit, fahrenheitToCelcius, metricValues } from '../../utils/forecast';\n\nconst fetchForecasts = ({ dispatch, getState }) => (next) => (action) => {\n  next(action);\n  if (action.type === FETCH_FORECASTS.START) {\n    const {\n      ui: { pagination },\n    } = getState();\n    const { key = requestKeys.fetchForecasts, params, ...rest } = action.meta;\n\n    const defaultPagination = pagination.default;\n\n    dispatch(\n      apiRequest({\n        url: '/forecast',\n        key: key,\n        params: {\n          ...params,\n          ...defaultPagination,\n        },\n        onSuccess: (data) => {\n          const {\n            forecasts: { byList, currentMetric },\n          } = getState();\n          const isNewList = !byList?.length;\n          dispatch({ type: FETCH_FORECASTS.SUCCESS, payload: data?.list || [] });\n          if (isNewList && currentMetric !== metricValues.CELCIUS) dispatch(applyMetricToForecastsFn(currentMetric));\n        },\n        ...rest,\n      })\n    );\n  }\n};\n\nconst applyMetricToForecasts = ({ dispatch, getState }) => (next) => (action) => {\n  next(action);\n  if (action.type === APPLY_METRICS_TO_FORECASTS) {\n    const { metric } = action.meta;\n    const {\n      forecasts: { byList },\n    } = getState();\n    if (!metric || !byList?.length) return;\n\n    const payload = byList.map((item) => {\n      const isToCelcius = metricValues.CELCIUS === metric;\n      const metricFunc = isToCelcius ? fahrenheitToCelcius : celsiusToFahrenheit;\n\n      return {\n        ...item,\n        main: {\n          ...item.main,\n          temp: metricFunc(item.main?.temp),\n          feels_like: metricFunc(item.main?.feels_like),\n          temp_min: metricFunc(item.main?.temp_min),\n          temp_max: metricFunc(item.main?.temp_max),\n        },\n      };\n    });\n    dispatch(updateForecastList(payload));\n  }\n};\n\nexport default [fetchForecasts, applyMetricToForecasts];\n","import api from './api';\nimport incident from './forecast';\n\nexport default [\n  ...api,\n  ...incident,\n];\n","import { configureStore } from '@reduxjs/toolkit';\nimport { createLogger } from 'redux-logger';\n\nimport reducer from './reducers';\nimport middleswares from './middleswares';\n\nimport { loadState, saveState } from '../utils';\nimport { metricValues } from '../utils/forecast';\n\nconst isDevelopment = process.env.NODE_ENV === 'development';\nconst allMiddlesWares = [...middleswares];\nif (isDevelopment) {\n  allMiddlesWares.push(createLogger());\n}\n\nconst store = configureStore({\n  preloadedState: loadState(),\n  reducer,\n  devTools: isDevelopment,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({ serializableCheck: false }).concat(allMiddlesWares),\n});\n\nstore.subscribe(() => {\n  const { forecasts } = store.getState();\n  const state = {\n    forecasts: {\n      currentDate: forecasts.currentDate,\n      currentMetric: forecasts.currentMetric || metricValues.CELCIUS,\n    },\n  };\n  saveState(state);\n});\n\nexport default store;\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('pwa');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('pwa', serializedState);\n  } catch {\n    // ignore write errors\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/store';\nimport './index.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"WeatherInfo_container__3r6-q\",\"action-bar\":\"WeatherInfo_action-bar__196l3\",\"has-error\":\"WeatherInfo_has-error__3FfuX\",\"refresh-btn\":\"WeatherInfo_refresh-btn__1qPXe\",\"error\":\"WeatherInfo_error__2T4fP\",\"weather-content\":\"WeatherInfo_weather-content__1kupc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls-container\":\"ForecastCarousel_controls-container__1bMfN\",\"controls-left\":\"ForecastCarousel_controls-left__1JfkU\",\"controls-right\":\"ForecastCarousel_controls-right__178rj\",\"controls\":\"ForecastCarousel_controls__2NXQJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"metric-switch-controls\":\"MetricSwitcher_metric-switch-controls__H4m2O\",\"metric-switch-radio-group\":\"MetricSwitcher_metric-switch-radio-group__3BEwg\",\"switch-control\":\"MetricSwitcher_switch-control__Bx3rE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Forecast_card__JO3L4\",\"selected\":\"Forecast_selected__1JvvX\",\"image\":\"Forecast_image__1OyC1\"};"],"sourceRoot":""}