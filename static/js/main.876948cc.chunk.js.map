{"version":3,"sources":["components/UI/Loading/Loading.module.scss","components/Weather/DailyWeatherChart/DailyWeatherChart.module.scss","redux/actions/_create.js","redux/actions/forecast.js","redux/actions/api.js","redux/actions/ui.js","services/_request/keys.js","utils/prop-types/forecast.js","utils/forecast.js","components/Weather/Forecast/index.js","components/Weather/ForecastCarousel/index.js","components/UI/StyledRadio/index.js","components/Weather/MetricSwitcher/index.js","components/UI/Loading/index.js","components/Weather/DailyWeatherChart/index.js","domain/WeatherInfo/index.js","utils/hooks/use-previous.js","components/App/App.js","reportWebVitals.js","redux/reducers/forecast.js","redux/reducers/ui.js","redux/reducers/index.js","services/_request/index.js","redux/middleswares/api.js","redux/middleswares/forecast.js","redux/middleswares/index.js","redux/store.js","index.js","components/Weather/ForecastCarousel/ForecastCarousel.module.scss","components/Weather/MetricSwitcher/MetricSwitcher.module.scss","components/Weather/Forecast/Forecast.module.scss"],"names":["module","exports","createActionType","type","entity","START","SUCCESS","ERROR","END","createActionString","name","FETCH_FORECASTS","RESET_FORECAST_STATE","APPLY_METRICS_TO_FORECASTS","UPDATE_FORECAST_LIST","SET_CURRENT_METRIC","setCurrentMetric","metric","payload","API_REQUEST","UPDATE_PAGINATION","UPDATE_ERROR_STATE","UPDATE_LOADING_STATE","updateLoadingState","key","requestKeys","PropTypes","shape","temp","number","isRequired","arrayOf","main","string","icon","metrics","metricValues","metricValuesIconMap","C","F","celsiusToFahrenheit","value","fahrenheitToCelcius","roundToTemp","Math","round","Forecast","props","weatherData","onClick","selectedDate","currentMetric","date","dayjs","dt_txt","format","wordedDate","Card","className","cx","styles","card","selected","CardContent","CardMedia","image","component","alt","src","weather","Typography","variant","color","align","gutterBottom","avg_temp","defaultProps","settings","dots","infinite","speed","slidesToShow","slidesToScroll","arrows","responsive","breakpoint","WeatherCarousel","items","onCardItemClick","setCurrentDate","useState","currentSlide","setCurrentSlide","sliderRef","useRef","isLowResTableOrMobile","useMediaQuery","minDeviceWidth","maxDeviceWidth","isMobile","afterChange","index","current","showLeftArrow","showRightArrow","Box","Button","controls","slickPrev","fontSize","slickNext","ref","map","item","uuid","useStyles","makeStyles","root","fontWeight","backgroundColor","borderRadius","width","height","boxShadow","backgroundImage","outline","outlineOffset","background","checkedIcon","display","content","StyledRadio","classes","Radio","disableRipple","MetricSwitcher","onChange","RadioGroup","FormControlLabel","role","control","checked","label","Loading","box","getOptions","maintainAspectRatio","scales","yAxis","ticks","beginAtZero","callback","values","DailyWeatherBarChart","data","chartData","labels","datasets","borderWidth","options","currentDate","dispatch","useDispatch","useSelector","forecasts","ui","forecastsForNextDays","forNextDays","forecastsByDate","byDate","loading","getForecasts","params","meta","fetchForecasts","useEffect","q","units","length","previousCurrentDate","todayForecast","usePrevious","forecastsForSelectedDate","Container","e","target","ForecastCarousel","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","byList","pagination","default","cnt","errors","state","action","groupBy","Object","groupList","last","sum","reduce","a","c","assign","instance","axios","create","baseURL","method","APPID","interceptors","request","use","config","error","Promise","reject","response","code","message","next","url","onError","onSuccess","isEmpty","FormData","createRequest","catch","Error","updateErrorState","finally","getState","rest","defaultPagination","list","metricFunc","feels_like","temp_min","temp_max","updateForecastList","api","incident","allMiddlesWares","middleswares","configureStore","reducer","devTools","process","middleware","getDefaultMiddleware","serializableCheck","concat","library","add","faChevronRight","faCheck","faCircleNotch","faChevronLeft","dom","watch","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.876948cc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Loading_box__2w-WH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"DailyWeatherChart_box__rqICc\"};","export const createActionType = (type, entity = 'App') => ({\n  START: `@@[${entity}] ${type}`,\n  SUCCESS: `@@[${entity}] ${type}_SUCCESS`,\n  ERROR: `@@[${entity}] ${type}_ERROR`,\n  END: `@@[${entity}] ${type}_END`,\n});\n\nexport const createActionString = (name, entity = 'App') => `@@[${entity}] ${name}`;\n","import { createActionType, createActionString } from './_create';\n\nexport const FETCH_FORECASTS = createActionType('FETCH_FORECASTS', 'Weather');\nexport const RESET_FORECAST_STATE = createActionType('RESET_FORECAST_STATE', 'Weather');\nexport const APPLY_METRICS_TO_FORECASTS = createActionString('APPLY_METRICS_TO_FORECASTS', 'Forecast');\nexport const UPDATE_FORECAST_LIST = createActionString('UPDATE_FORECAST_LIST', 'Forecast');\nexport const SET_CURRENT_METRIC = createActionString('SET_CURRENT_METRIC', 'Temperature');\n\nexport const fetchForecasts = (params = {}) => ({\n  type: FETCH_FORECASTS.START,\n  meta: {\n    params,\n  },\n});\n\nexport const resetForecastState = () => ({\n  type: RESET_FORECAST_STATE.START,\n});\n\nexport const applyMetricToForecasts = (metric) => ({\n  type: APPLY_METRICS_TO_FORECASTS,\n  meta: {\n    metric,\n  },\n});\n\nexport const updateForecastList = (payload) => ({\n  type: UPDATE_FORECAST_LIST,\n  payload,\n});\n\nexport const setCurrentMetric = (metric) => ({\n  type: SET_CURRENT_METRIC,\n  payload: metric,\n});\n\n\n","import { createActionType } from './_create';\n\nexport const API_REQUEST = createActionType('API_REQUEST', 'Api Request');\nexport const apiRequest = meta => ({\n  type: API_REQUEST.START,\n  meta,\n});\n","export const UPDATE_PAGINATION = 'UPDATE_PAGINATION';\nexport const UPDATE_ERROR_STATE = 'UPDATE_ERROR_STATE';\nexport const UPDATE_LOADING_STATE = 'UPDATE_LOADING_STATE';\n\nexport const updatePagination = (key, payload) => ({\n  type: UPDATE_PAGINATION,\n  key,\n  payload\n});\n\nexport const updateErrorState = (key, payload) => ({\n  type: UPDATE_ERROR_STATE,\n  key,\n  payload\n});\n\nexport const updateLoadingState = (key, payload) => ({\n  type: UPDATE_LOADING_STATE,\n  key,\n  payload\n});\n","export const requestKeys = {\n  fetchForecasts: 'fetchForecasts',\n}","import PropTypes from 'prop-types';\n\nexport default {\n  main: PropTypes.shape({\n    temp: PropTypes.number.isRequired,\n  }),\n  weather: PropTypes.arrayOf(PropTypes.shape(\n    {\n      main: PropTypes.string.isRequired,\n      icon: PropTypes.string.isRequired,\n    }),\n  ),\n  dt_txt: PropTypes.string.isRequired,\n  avg_temp: PropTypes.number,\n};","export const metrics = {\n  CELCIUS: 'Celcius',\n  FAHRENHEIT: 'Fahrenheit',\n};\n\nexport const metricValues = {\n  CELCIUS: 'C',\n  FAHRENHEIT: 'F',\n};\n\nexport const metricValuesIconMap = {\n  C: '\\xB0C',\n  F: '\\xB0F',\n};\n\nexport const celsiusToFahrenheit = value => value * 9 / 5 + 32;\n\nexport const fahrenheitToCelcius = value => (value - 32) * 5 / 9;\n\nexport const roundToTemp = value => Math.round(value);\n","import React from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Card, CardContent, CardMedia, Typography } from '@material-ui/core';\nimport dayjs from 'dayjs';\nimport forecastPropTypes from 'utils/prop-types/forecast';\n\nimport styles from './Forecast.module.scss';\nimport { metricValuesIconMap, roundToTemp } from 'utils/forecast';\n\n\nconst Forecast = (props) => {\n  const { weatherData, onClick, selectedDate, currentMetric } = props;\n  const date = dayjs(weatherData.dt_txt).format('DD/MM/YYYY');\n  const wordedDate = dayjs(weatherData.dt_txt).format(`DD MMM, YYYY`);\n  return <Card className={cx(styles.card, date === selectedDate && styles.selected)} onClick={() => onClick(date)}>\n    <CardContent>\n      <CardMedia\n        className={styles.image}\n        component='img'\n        alt='forecast-icon'\n        src={`http://openweathermap.org/img/wn/${weatherData.weather[0]?.icon}@2x.png`}\n      />\n      <Typography variant='body2' color='textSecondary' align='center'>\n        {weatherData.weather[0]?.main}\n      </Typography>\n      <Typography gutterBottom variant='h4' component='h2' align='center'>\n        {`${roundToTemp(weatherData.main.temp)}${metricValuesIconMap[currentMetric]}`}\n\n      </Typography>\n      <Typography variant='subtitle1' align='center' color='textSecondary' component='p'>\n        {wordedDate}\n      </Typography>\n      <Typography variant='subtitle1' color='textSecondary' align='center' component='p'>\n        Average Temp: {`${roundToTemp(weatherData.avg_temp)}${metricValuesIconMap[currentMetric]}`}\n      </Typography>\n    </CardContent>\n  </Card>;\n};\n\nForecast.propTypes = {\n  weatherData: PropTypes.shape(forecastPropTypes).isRequired,\n  onClick: PropTypes.func.isRequired,\n  selectedDate: PropTypes.string,\n  currentMetric: PropTypes.string.isRequired,\n};\n\nForecast.defaultProps = {\n  selectedDate: null\n};\n\n\nexport default Forecast;","import React, { useRef, useState } from 'react';\nimport Slider from 'react-slick';\nimport cx from 'classnames';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport { v1 as uuid } from 'uuid';\nimport dayjs from 'dayjs';\nimport { useMediaQuery } from 'react-responsive';\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\nimport styles from './ForecastCarousel.module.scss';\n\nimport WeatherCard from '../Forecast';\nimport { Box, Button } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport forecastProptypes from 'utils/prop-types/forecast';\n\nconst settings = {\n  dots: false,\n  infinite: true,\n  speed: 500,\n  slidesToShow: 3,\n  slidesToScroll: 1,\n  arrows: false,\n  responsive: [\n    {\n      breakpoint: 1024,\n      settings: {\n        slidesToShow: 3,\n      },\n    },\n    {\n      breakpoint: 768,\n      settings: {\n        slidesToShow: 2,\n      },\n    },\n    {\n      breakpoint: 480,\n      settings: {\n        slidesToShow: 1,\n      },\n    },\n  ],\n};\n\nconst WeatherCarousel = (props) => {\n  const { items, onCardItemClick, selectedDate, setCurrentDate, currentMetric } = props;\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const sliderRef = useRef(null);\n\n  const isLowResTableOrMobile = useMediaQuery({ minDeviceWidth: 481, maxDeviceWidth: 768 });\n  const isMobile = useMediaQuery({ minDeviceWidth: 320, maxDeviceWidth: 480 });\n\n  const getNumOfVisibleSlides = () => {\n    if (isMobile) return 1;\n    else if (isLowResTableOrMobile) return 2;\n    else return 3;\n  }\n\n  const gotoNext = () => {\n    sliderRef.current.slickNext();\n  };\n\n  const gotoPrevious = () => {\n    sliderRef.current.slickPrev();\n  };\n\n  settings.afterChange = index => {\n    setCurrentSlide(index);\n    if (isMobile) {\n      const current = items[index];\n      if (current) {\n        setCurrentDate(dayjs(current.dt_txt).format('DD/MM/YYYY'))\n      }\n    }\n  };\n\n  const showLeftArrow = currentSlide > 0;\n  const showRightArrow = !!items[currentSlide + getNumOfVisibleSlides()];\n\n  return <>\n    <Box component='div' className={cx(\n      styles['controls-container'],\n      { [styles['controls-left']]: showLeftArrow && !showRightArrow },\n      { [styles['controls-right']]: showRightArrow && !showLeftArrow },\n    )}>\n      {showLeftArrow && <Button className={styles.controls} onClick={gotoPrevious}>\n        <ArrowBackIcon fontSize='large' />\n      </Button>}\n      {showRightArrow && <Button className={styles.controls} onClick={gotoNext}>\n        <ArrowForwardIcon fontSize='large' />\n      </Button>}\n    </Box>\n    <Slider ref={sliderRef} {...settings}>\n      {items.map(item => <WeatherCard\n        currentMetric={currentMetric}\n        selectedDate={selectedDate}\n        onClick={onCardItemClick}\n        weatherData={item}\n        key={uuid} />)}\n    </Slider>\n  </>;\n};\n\nWeatherCarousel.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape(forecastProptypes)).isRequired,\n  onCardItemClick: PropTypes.func.isRequired,\n  setCurrentDate: PropTypes.func.isRequired,\n  selectedDate: PropTypes.string,\n  currentMetric: PropTypes.string.isRequired,\n};\n\nWeatherCarousel.defaultProps = {\n  selectedDate: null,\n};\n\nexport default WeatherCarousel;","import { makeStyles, Radio } from '@material-ui/core';\nimport cx from 'classnames';\n\nconst useStyles = makeStyles({\n  root: {\n    fontWeight: 'bold !important',\n    '&:hover': {\n      backgroundColor: 'transparent',\n    },\n  },\n  icon: {\n    borderRadius: '50%',\n    width: 16,\n    height: 16,\n    boxShadow: 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\n    backgroundColor: '#f5f8fa',\n    backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))',\n    '$root.Mui-focusVisible &': {\n      outline: '2px auto rgba(19,124,189,.6)',\n      outlineOffset: 2,\n    },\n    'input:hover ~ &': {\n      backgroundColor: '#ebf1f5',\n    },\n    'input:disabled ~ &': {\n      boxShadow: 'none',\n      background: 'rgba(206,217,224,.5)',\n    },\n  },\n  checkedIcon: {\n    backgroundColor: '#426CC0',\n    backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))',\n    '&:before': {\n      display: 'block',\n      width: 16,\n      height: 16,\n      backgroundImage: 'radial-gradient(#fff,#fff 28%,transparent 32%)',\n      content: '\"\"',\n    },\n    'input:hover ~ &': {\n      backgroundColor: '#426CC0',\n    },\n  },\n});\n\nconst StyledRadio = (props) => {\n  const classes = useStyles();\n\n  return (\n    <Radio\n      className={classes.root}\n      disableRipple\n      color=\"default\"\n      checkedIcon={<span className={cx(classes.icon, classes.checkedIcon)} />}\n      icon={<span className={classes.icon} />}\n      {...props}\n    />\n  );\n}\n\nexport default StyledRadio;\n","import React from 'react';\nimport { Box, FormControlLabel, RadioGroup } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport styles from './MetricSwitcher.module.scss';\nimport StyledRadio from '../../UI/StyledRadio';\nimport { metrics, metricValues } from 'utils/forecast';\n\nconst MetricSwitcher = (props) => {\n  const { onChange, value } = props;\n  return <Box component='div' className={styles['metric-switch-controls']}>\n    <RadioGroup className={styles['metric-switch-radio-group']} value={value} onChange={onChange} name='radio-button-metric'>\n      <FormControlLabel\n        role=\"radio\"\n        className={styles['switch-control']}\n        value={metricValues.CELCIUS}\n        control={<StyledRadio />}\n        checked={value === metricValues.CELCIUS}\n        label={metrics.CELCIUS} />\n      <FormControlLabel\n        role=\"radio\"\n        className={styles['switch-control']}\n        value={metricValues.FAHRENHEIT}\n        checked={value === metricValues.FAHRENHEIT}\n        control={<StyledRadio />}\n        label={metrics.FAHRENHEIT} />\n    </RadioGroup>\n\n  </Box>;\n};\n\nMetricSwitcher.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string,\n};\n\nMetricSwitcher.defaultProps = {\n  value: null,\n};\n\nexport default MetricSwitcher;","import React from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport styles from './Loading.module.scss';\n\nconst Loading = () => <Box className={styles.box}>\n  <Typography gutterBottom variant='h5' component='h5' align='center'>\n    Loading...\n  </Typography>\n</Box>;\n\nexport default Loading;\n","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport dayjs from 'dayjs';\nimport { Box } from '@material-ui/core';\nimport { roundToTemp, metricValuesIconMap } from 'utils/forecast';\nimport styles from './DailyWeatherChart.module.scss';\nimport PropTypes from 'prop-types';\nimport forecastProptypes from 'utils/prop-types/forecast';\n\n\nconst getOptions = (metric) => {\n\n  return {\n    maintainAspectRatio: false,\n    scales: {\n      yAxis: [\n        {\n          ticks: {\n            display: true,\n            beginAtZero: true,\n            callback (value, index, values) {\n              return `${value} ${metricValuesIconMap[metric]}`;\n            },\n          },\n        },\n      ],\n    },\n  };\n};\n\nconst DailyWeatherBarChart = (props) => {\n  const { data, metric } = props;\n  const chartData = {\n    labels: data.map(item => dayjs(item.dt_txt).format('h:mm A')),\n    datasets: [\n      {\n        label: `Temperatures in ${metricValuesIconMap[metric]}`,\n        data: data.map(item => roundToTemp(item.main.temp)),\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n          'rgba(75, 192, 192, 0.2)',\n          'rgba(153, 102, 255, 0.2)',\n          'rgba(255, 159, 64, 0.2)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n  return <Box className={styles.box}>\n    <Bar type='vertical' data={chartData} options={getOptions(props.metric)} />\n  </Box>;\n\n};\n\nDailyWeatherBarChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape(forecastProptypes)).isRequired,\n};\n\n\nexport default DailyWeatherBarChart;","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Container } from '@material-ui/core';\nimport dayjs from 'dayjs';\nimport { fetchForecasts, resetForecastState, applyMetricToForecasts, setCurrentMetric } from 'redux/actions';\nimport { requestKeys } from 'services/_request/keys';\nimport ForecastCarousel from 'components/Weather/ForecastCarousel';\nimport MetricSwitcher from 'components/Weather/MetricSwitcher';\nimport Loading from 'components/UI/Loading';\nimport DailyWeatherBarChart from 'components/Weather/DailyWeatherChart';\nimport usePrevious from 'utils/hooks/use-previous'\n\nconst Forecast = () => {\n  const [currentDate, setCurrentDate] = useState();\n  const dispatch = useDispatch();\n  const { forecastsForNextDays, loading, currentMetric, forecastsByDate } = useSelector(({ forecasts, ui }) => ({\n    forecastsForNextDays: forecasts.forNextDays,\n    forecastsByDate: forecasts.byDate,\n    currentMetric: forecasts.currentMetric,\n    loading: ui.loading[requestKeys.fetchForecasts],\n  }));\n\n  const getForecasts = (params) => dispatch(fetchForecasts(params));\n\n  useEffect(() => {\n    getForecasts({ q: 'Munich,de', units: 'metric' });\n    return () => {\n      dispatch(resetForecastState());\n    }\n  }, []);\n\n  useEffect(() => {\n    if (forecastsForNextDays?.length)\n      dispatch(applyMetricToForecasts(currentMetric));\n    if (previousCurrentDate)\n      setCurrentDate(previousCurrentDate);\n  }, [currentMetric]);\n\n\n  useEffect(() => {\n    if (forecastsForNextDays?.length) {\n      const todayForecast = forecastsForNextDays[0];\n      const date = previousCurrentDate || dayjs(todayForecast.dt_txt).format('DD/MM/YYYY');\n      setCurrentDate(date);\n    }\n  }, [forecastsForNextDays]);\n\n  const previousCurrentDate = usePrevious(currentDate);\n\n  const onMetricChange = e => dispatch(setCurrentMetric(e.target.value));\n\n  const onCardItemClick = date => setCurrentDate(date);\n\n  const forecastsForSelectedDate = forecastsByDate[currentDate];\n\n  return loading ? <Loading /> : <Container>\n    <MetricSwitcher value={currentMetric} onChange={onMetricChange} />\n    <ForecastCarousel\n      currentMetric={currentMetric}\n      setCurrentDate={setCurrentDate}\n      metric={currentMetric}\n      selectedDate={currentDate}\n      items={forecastsForNextDays}\n      onCardItemClick={onCardItemClick} />\n    {forecastsForSelectedDate && <DailyWeatherBarChart metric={currentMetric}\n                                                       data={forecastsForSelectedDate} />}\n  </Container>;\n\n};\n\nexport default Forecast;","import { useEffect, useRef } from 'react';\n// Hook\nexport default (value) => {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef();\n\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n};\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport Forecast from 'domain/WeatherInfo';\n\nconst App = () => (<div>\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" component={Forecast} />\n      </Switch>\n    </BrowserRouter>\n  </div>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { groupBy, last } from 'lodash';\nimport dayjs from 'dayjs';\nimport {\n  FETCH_FORECASTS,\n  RESET_FORECAST_STATE, SET_CURRENT_METRIC, UPDATE_FORECAST_LIST,\n} from '../actions';\nimport { metricValues } from '../../utils/forecast';\n\nconst initialState = {\n  currentMetric: metricValues.CELCIUS,\n  byList: [],\n  byDate: {},\n  forNextDays: [],\n};\n\nconst forecastReducer = (state = initialState, action) => {\n  const { payload, type } = action;\n  switch (type) {\n    case UPDATE_FORECAST_LIST:\n    case FETCH_FORECASTS.SUCCESS: {\n      const byList = payload;\n      const byDate = groupBy(byList, item => dayjs(item.dt_txt).format('DD/MM/YYYY'));\n      const forNextDays = Object.values(byDate).map(groupList => {\n        const item = {...last(groupList)};\n        const sum = groupList.reduce( ( a, c ) => a + c?.main?.temp, 0 )\n        return {\n          ...item,\n          avg_temp: sum / groupList.length\n        }\n      });\n\n      return Object.assign({}, state, {\n        byList,\n        byDate,\n        forNextDays,\n      });\n    }\n    case SET_CURRENT_METRIC:\n      return {\n        ...state,\n        currentMetric: payload,\n      };\n    case RESET_FORECAST_STATE:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nexport default forecastReducer;\n\n","import {\n  UPDATE_ERROR_STATE,\n  UPDATE_LOADING_STATE,\n  UPDATE_PAGINATION,\n} from '../actions';\n\nconst initialState = {\n  pagination: {\n    default: {\n      cnt: 40\n    },\n  },\n  loading: {},\n  errors: {},\n};\n\nconst uiReducer = (state = initialState, action) => {\n  const { payload, key } = action;\n  switch (action.type) {\n    case UPDATE_LOADING_STATE: {\n      return Object.assign({}, state, {\n        loading: {\n          ...state.loading,\n          [key]: payload,\n        },\n      });\n    }\n\n    case UPDATE_PAGINATION: {\n      const { pagination } = state;\n      const current = pagination[key] || pagination.default;\n      return Object.assign({}, state, {\n        pagination: {\n          ...state.pagination,\n          [key]: {\n            ...current,\n            ...payload,\n          },\n        },\n      });\n    }\n    case UPDATE_ERROR_STATE: {\n      return Object.assign({}, state, {\n        errors: {\n          ...state.errors,\n          [key]: payload,\n        },\n      });\n    }\n    default:\n      return state;\n  }\n};\n\nexport default uiReducer;\n\n\n","import forecasts from './forecast';\nimport ui from './ui';\n\nexport default {\n    forecasts,\n    ui\n};","import axios from 'axios';\n\n// Default config options\nconst defaultOptions = {\n  baseURL: 'https://api.openweathermap.org/data/2.5/',\n  method: 'GET',\n  params: {\n    APPID: '75f972b80e26f14fe6c920aa6a85ad57'\n  },\n};\n\n// Create instance\nconst instance = axios.create(defaultOptions);\n\ninstance.interceptors.request.use(\n  config => config,\n  error => Promise.reject(error)\n);\n// Add a response interceptor\ninstance.interceptors.response.use(\n  response => response.data,\n  error => {\n    if (error.response) {\n      if (error.code === 'ECONNABORTED')\n        throw 'Network timeout, please try again';\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      throw error.response.data;\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      error.message =\n        'This request is taking too long, please check your network';\n      throw error;\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      throw error;\n    }\n  }\n);\nexport default instance;\n\nexport const createRequest = config => instance(config);\n","import React from 'react';\nimport { isEmpty } from 'lodash';\nimport { createRequest } from '../../services/_request';\nimport {\n  API_REQUEST,\n  updateLoadingState,\n  updateErrorState\n} from '../actions';\n\nconst apiRequest = ({ dispatch }) => next => action => {\n  if (action.type === API_REQUEST.START) {\n    const {\n      method = 'GET',\n      url,\n      key,\n      payload,\n      onError,\n      params,\n      onSuccess,\n    } = action.meta;\n    dispatch(updateLoadingState(key, true));\n    const config = { method, url };\n    if (payload && (!isEmpty(payload) || payload instanceof FormData)) {\n      config.data = payload;\n    }\n    if (params && !isEmpty(params)) {\n      config.params = params;\n    }\n    createRequest(config)\n      .then(data => {\n        if (onSuccess) {\n          if (typeof onSuccess === 'function') {\n            onSuccess(data);\n          } else {\n            dispatch({ type: onSuccess, payload: data });\n          }\n        }\n      })\n      .catch(e => {\n        if (onError) {\n          if (typeof onError !== 'function') {\n            throw new Error('onError parameter should be a function');\n          }\n          onError(e.message);\n        } else {\n          dispatch(updateErrorState(key, e.message))\n        }\n      }).finally(() => dispatch(updateLoadingState(key, false)));\n  }\n  return next(action);\n};\n\nexport default [apiRequest];\n","import {\n  apiRequest,\n  APPLY_METRICS_TO_FORECASTS,\n  FETCH_FORECASTS,\n  applyMetricToForecasts as applyMetrics,\n  updateForecastList,\n  setCurrentMetric,\n} from '../actions';\nimport { requestKeys } from '../../services/_request/keys';\nimport { celsiusToFahrenheit, fahrenheitToCelcius, metricValues } from '../../utils/forecast';\n\nconst fetchForecasts = ({ dispatch, getState }) => next => action => {\n  next(action);\n  if (action.type === FETCH_FORECASTS.START) {\n    const { ui: { pagination } } = getState();\n    const { key = requestKeys.fetchForecasts, params, ...rest } = action.meta;\n\n    const defaultPagination = pagination.default;\n\n    dispatch(\n      apiRequest({\n        url: '/forecast',\n        key: key,\n        params: {\n          ...params,\n          ...defaultPagination,\n        },\n        onSuccess: data => {\n          dispatch({ type: FETCH_FORECASTS.SUCCESS, payload: data?.list || [] });\n        },\n        ...rest,\n      }),\n    );\n  }\n};\n\nconst applyMetricToForecasts = ({ dispatch, getState }) => next => action => {\n  next(action);\n  if (action.type === APPLY_METRICS_TO_FORECASTS) {\n    const { metric } = action.meta;\n    const { forecasts: { byList } } = getState();\n    if (!metric || !byList?.length)\n      return;\n    const payload = byList.map(item => {\n      const isToCelcius = metricValues.CELCIUS === metric;\n      const metricFunc = isToCelcius ? fahrenheitToCelcius : celsiusToFahrenheit;\n\n      return {\n        ...item,\n        main: {\n          ...item.main,\n          temp: metricFunc(item.main?.temp),\n          feels_like: metricFunc(item.main?.feels_like),\n          temp_min: metricFunc(item.main?.temp_min),\n          temp_max: metricFunc(item.main?.temp_max),\n        },\n      };\n    });\n    dispatch(updateForecastList(payload));\n    dispatch(setCurrentMetric(metric));\n  }\n};\n\nexport default [fetchForecasts, applyMetricToForecasts];\n","import api from './api';\nimport incident from './forecast';\n\nexport default [\n  ...api,\n  ...incident,\n];\n","import { configureStore } from '@reduxjs/toolkit';\nimport { createLogger } from 'redux-logger'\n\nimport reducer from './reducers';\nimport middleswares from './middleswares';\n\nconst isDevelopment = process.env.NODE_ENV === 'development';\nconst allMiddlesWares = [...middleswares];\nif (isDevelopment) {\n  allMiddlesWares.push(createLogger());\n}\n\nexport default configureStore({\n  reducer,\n  devTools: isDevelopment,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({ serializableCheck: false }).concat(allMiddlesWares),\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/store';\nimport './index.scss';\n\n\nimport {dom, library} from '@fortawesome/fontawesome-svg-core';\nimport {\n  faCheck,\n  faChevronRight,\n  faCircleNotch,\n  faChevronLeft\n} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(\n  faChevronRight,\n  faCheck,\n  faCircleNotch,\n  faChevronLeft\n);\ndom.watch();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls-container\":\"ForecastCarousel_controls-container__1bMfN\",\"controls-left\":\"ForecastCarousel_controls-left__1JfkU\",\"controls-right\":\"ForecastCarousel_controls-right__178rj\",\"controls\":\"ForecastCarousel_controls__2NXQJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"metric-switch-controls\":\"MetricSwitcher_metric-switch-controls__H4m2O\",\"metric-switch-radio-group\":\"MetricSwitcher_metric-switch-radio-group__3BEwg\",\"switch-control\":\"MetricSwitcher_switch-control__Bx3rE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Forecast_card__JO3L4\",\"selected\":\"Forecast_selected__1JvvX\",\"image\":\"Forecast_image__1OyC1\"};"],"sourceRoot":""}